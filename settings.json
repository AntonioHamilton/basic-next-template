{
  "workbench.iconTheme": "material-icon-theme",
  "editor.fontFamily": "Fira Code",
  "editor.fontLigatures": true,
  "terminal.integrated.fontFamily": "monospace",
  "editor.formatOnSave": true,
  "explorer.confirmDelete": false,
  "javascript.updateImportsOnFileMove.enabled": "always",
  "explorer.confirmDragAndDrop": false,
  "editor.wordWrap": "on",
  "explorer.compactFolders": false,
  "stories.username": "brown_Suriname",
  "terminal.integrated.shell.windows": "C:\\Windows\\System32\\cmd.exe",
  "auto-rename-tag.activationOnLanguage": ["*"],
  "eslint.validate": ["javascript", "javascriptreact", "typescript", "typescriptreact"],
  "prettier.requireConfig": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  },
  "eslint.options": {
    "extensions": [".js", ".vue", ".ts", ".html"]
  },
  "typescript.updateImportsOnFileMove.enabled": "always",
  "json.schemas": [],
  "terminal.integrated.defaultProfile.osx": "zsh",
  "security.workspace.trust.untrustedFiles": "open",
  "workbench.settings.applyToAllProfiles": [
    "editor.tabSize"
  ],
  "debug.onTaskErrors": "debugAnyway",
  "[python]": {
    "diffEditor.ignoreTrimWhitespace": false,
    "gitlens.codeLens.symbolScopes": [
      "!Module"
    ],
    "editor.formatOnType": true,
    "editor.wordBasedSuggestions": "off"
  },
  "explorer.confirmPasteNative": false,
  "terminal.integrated.defaultProfile.windows": "Git Bash",
  "cmake.showOptionsMovedNotification": false,
  "security.workspace.trust.startupPrompt": "never",
  "security.workspace.trust.emptyWindow": false,
  "security.workspace.trust.enabled": false,
  "git.openRepositoryInParentFolders": "always",
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "geminicodeassist.inlineSuggestions.enableAuto": true,
  "workbench.secondarySideBar.showLabels": false,
  "diffEditor.codeLens": true,
  "geminicodeassist.rules": "# üìê Regras de IA do Projeto para BlogPessoal\n\n# 0. Regras gerais da IA\n\n- N√£o coloque coment√°rios no c√≥digo\n- Crie todas as vari√°veis, fun√ß√µes, classes, tipagens e outras coisas de c√≥digo em ingl√™s\n- N√£o altere trechos de c√≥digo ou arquivos que eu n√£o pedi para modificar.\n- Explique o que foi feito de forma direta, clara e concisa.\n- S√≥ forne√ßa explica√ß√µes longas ou detalhadas se eu pedir explicitamente.\n- Sempre pergunte antes de assumir contexto ou tomar decis√µes amb√≠guas.\n- Responda com o m√≠nimo necess√°rio para que eu entenda e execute, sem repeti√ß√µes.\n- Quando poss√≠vel, entregue respostas com exemplos prontos para uso.\n- Nunca inclua frases de encerramento como ‚Äúespero que isso ajude‚Äù.\n- Nunca invente informa√ß√µes ou estruturas n√£o existentes no projeto.\n\n## 1. Estrutura de Pastas\n\n- **src/**: Todo o c√≥digo fonte deve ficar dentro desta pasta.\n  - **src/pages/**: P√°ginas do Next.js.\n  - **src/components/**: Componentes reutiliz√°veis.\n  - **src/styles/**: Estilos globais e arquivos SCSS.\n  - **src/services/**: Servi√ßos de API e integra√ß√µes externas.\n  - **src/utils/**: Fun√ß√µes utilit√°rias.\n  - **src/types/**: Tipos TypeScript globais.\n- **public/**: Arquivos est√°ticos (imagens, favicon, etc).\n\n## 2. Padr√£o de C√≥digo\n\n- Utilize **TypeScript** em todos os arquivos `.ts` e `.tsx`.\n- Componentes devem ser **function components**.\n- Use **arrow functions** para componentes e fun√ß√µes utilit√°rias.\n- Nomes de arquivos de componentes em **PascalCase**.\n- Nomes de arquivos utilit√°rios em **camelCase**.\n- Sempre tipar props e fun√ß√µes.\n- Use **React Hooks** para l√≥gica de estado e efeitos.\n\n## 3. Estiliza√ß√£o\n\n- Utilize **SCSS** para estiliza√ß√£o de componentes (`.module.scss`).\n- Siga o padr√£o **BEM** (Block Element Modifier) para nomear classes CSS.\n- Estilos globais devem estar em `src/styles/globals.scss`.\n- N√£o utilizar styled-components ou outras libs de CSS-in-JS.\n\n## 4. Lint e Formata√ß√£o\n\n- Use **ESLint** com o padr√£o do reposit√≥rio (Airbnb + Prettier).\n- Use **Prettier** para formata√ß√£o autom√°tica.\n- Nunca fa√ßa commit com erros de lint.\n- Utilize o script `lint` antes de subir c√≥digo.\n\n## 5. Commits e Versionamento\n\n- Siga o padr√£o de commits sem√¢nticos:\n  - `feat`: Nova funcionalidade\n  - `fix`: Corre√ß√£o de bug\n  - `docs`: Documenta√ß√£o\n  - `style`: Mudan√ßa de formata√ß√£o (espa√ßos, ponto e v√≠rgula, etc)\n  - `refactor`: Refatora√ß√£o de c√≥digo\n  - `test`: Adi√ß√£o ou ajuste de testes\n  - `chore`: Outras mudan√ßas (build, configs, etc)\n- Use **husky** para hooks de pr√©-commit (lint e prettier).\n\n## 6. Testes\n\n- Utilize **Jest** e **@testing-library/react** para testes.\n- Os testes devem ficar em arquivos `*.test.tsx` ou `*.spec.tsx` dentro da pasta do componente ou em `__tests__`.\n\n## 7. Configura√ß√µes Gerais\n\n- O arquivo `.env.example` deve ser mantido atualizado com todas as vari√°veis de ambiente necess√°rias.\n- O projeto deve rodar com `yarn` ou `npm` sem erros ap√≥s o clone.\n- O arquivo `README.md` deve ser atualizado com instru√ß√µes de uso e desenvolvimento.\n\n## 8. Depend√™ncias\n\n- Todas as depend√™ncias devem ser verificadas contra vulnerabilidades conhecidas na base do NPM.\n- Caso alguma depend√™ncia possua vulnerabilidade, deve ser atualizada para uma vers√£o segura ou substitu√≠da por outra alternativa.\n- Mantenha as depend√™ncias sempre atualizadas.\n- N√£o adicionar depend√™ncias desnecess√°rias.\n\n## 9. Organiza√ß√£o de Imports\n\n- Imports de bibliotecas externas primeiro, depois imports internos.\n- Separar imports por uma linha em branco.\n\n## 10. Gerenciamento de Estado\n\n- Para estado global, utilize a **Context API** do React.\n- Crie contextos em `src/contexts` e provedores que encapsulem a l√≥gica de estado.\n- Evite prop-drilling excessivo; prefira o uso de contextos para estados compartilhados por m√∫ltiplos componentes.\n\n## 11. Acessibilidade (a11y)\n\n- Utilize HTML sem√¢ntico sempre que poss√≠vel (`<nav>`, `<main>`, `<article>`, `<aside>`, etc.).\n- Garanta que todos os elementos interativos (bot√µes, links) sejam acess√≠veis via teclado.\n- Imagens devem ter o atributo `alt` preenchido, a menos que sejam puramente decorativas (nesse caso, `alt=\"\"`).\n- Utilize atributos ARIA quando necess√°rio para melhorar a experi√™ncia com leitores de tela.\n\n\n\n\n",
  "terminal.integrated.enableMultiLinePasteWarning": "never",
}
